#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Pre-commit hook for Neurlyn
echo "üîç Running pre-commit checks..."

# 1. Check for staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)
if [ -z "$STAGED_FILES" ]; then
    echo "No files staged for commit"
    exit 0
fi

# 2. Check for console.log statements in JS files
echo "üìù Checking for console.log statements..."
CONSOLE_LOGS=$(echo "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx)$' | xargs grep -l 'console\.log' 2>/dev/null || true)
if [ ! -z "$CONSOLE_LOGS" ]; then
    echo "‚ö†Ô∏è  Warning: console.log found in:"
    echo "$CONSOLE_LOGS"
    echo "Consider removing or replacing with proper logging"
fi

# 3. Check for merge conflict markers
echo "üîÄ Checking for merge conflict markers..."
if echo "$STAGED_FILES" | xargs grep -E '<<<<<<< |======= |>>>>>>> ' 2>/dev/null; then
    echo "‚ùå Error: Merge conflict markers found!"
    echo "Please resolve conflicts before committing"
    exit 1
fi

# 4. Run linter on staged JavaScript/TypeScript files
JS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx)$' || true)
if [ ! -z "$JS_FILES" ]; then
    echo "üßπ Running ESLint..."
    npx eslint $JS_FILES --max-warnings 10
    if [ $? -ne 0 ]; then
        echo "‚ùå ESLint found errors. Please fix them before committing"
        exit 1
    fi
fi

# 5. Check CSS files for common issues
CSS_FILES=$(echo "$STAGED_FILES" | grep -E '\.css$' || true)
if [ ! -z "$CSS_FILES" ]; then
    echo "üé® Checking CSS files..."
    for file in $CSS_FILES; do
        # Check for !important overuse
        IMPORTANT_COUNT=$(grep -c '!important' "$file" 2>/dev/null || echo "0")
        if [ "$IMPORTANT_COUNT" -gt 20 ]; then
            echo "‚ö†Ô∏è  Warning: $file has $IMPORTANT_COUNT !important declarations (limit: 20)"
        fi

        # Check for hardcoded pixel values that might break mobile
        FIXED_WIDTH=$(grep -E 'width:\s*[0-9]+px' "$file" | grep -v 'max-width' | grep -v 'min-width' || true)
        if [ ! -z "$FIXED_WIDTH" ]; then
            echo "‚ö†Ô∏è  Warning: Fixed width found in $file - consider using responsive units"
        fi
    done
fi

# 6. Check HTML files
HTML_FILES=$(echo "$STAGED_FILES" | grep -E '\.html$' || true)
if [ ! -z "$HTML_FILES" ]; then
    echo "üìÑ Checking HTML files..."
    for file in $HTML_FILES; do
        # Check for missing alt attributes on images
        if grep -E '<img[^>]*>' "$file" | grep -v 'alt=' 2>/dev/null; then
            echo "‚ö†Ô∏è  Warning: Missing alt attributes on images in $file"
        fi
    done
fi

# 7. Check file sizes
echo "üì¶ Checking file sizes..."
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        SIZE=$(wc -c < "$file")
        # Warn if any file is larger than 500KB
        if [ "$SIZE" -gt 512000 ]; then
            echo "‚ö†Ô∏è  Warning: $file is larger than 500KB ($(($SIZE/1024))KB)"
            if echo "$file" | grep -E '\.(jpg|jpeg|png|gif|svg)$' > /dev/null; then
                echo "   Consider optimizing this image file"
            fi
        fi
    fi
done

# 8. Run prettier on staged files
echo "üíÖ Running Prettier..."
npx prettier --check $STAGED_FILES 2>/dev/null || {
    echo "‚ö†Ô∏è  Some files are not properly formatted"
    echo "Run 'npm run format' to fix formatting issues"
}

# 9. Check for sensitive information
echo "üîê Checking for sensitive information..."
SENSITIVE_PATTERNS="(api[_-]?key|apikey|secret|password|token|private[_-]?key|aws[_-]?access|credential)"
if echo "$STAGED_FILES" | xargs grep -iE "$SENSITIVE_PATTERNS" 2>/dev/null | grep -v "// " | grep -v "# "; then
    echo "‚ùå Error: Possible sensitive information detected!"
    echo "Please review the above matches before committing"
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# 10. Run unit tests if test files were modified
if echo "$STAGED_FILES" | grep -E '\.(test|spec)\.(js|jsx|ts|tsx)$' > /dev/null; then
    echo "üß™ Test files modified, running tests..."
    npm test -- --passWithNoTests
    if [ $? -ne 0 ]; then
        echo "‚ùå Tests failed! Please fix them before committing"
        exit 1
    fi
fi

echo "‚úÖ All pre-commit checks passed!"